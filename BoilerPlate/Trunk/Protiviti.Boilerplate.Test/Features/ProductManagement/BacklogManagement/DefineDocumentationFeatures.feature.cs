// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Protiviti.Boilerplate.Test.Features.ProductManagement.BacklogManagement
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DefineDocumentationFeaturesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DefineDocumentationFeatures.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Define Documentation Features", "In order to control what documentation is created by the team\r\nAs a team member\r\n" +
                    "I want to be able to define a set of features that spcifify what documentation s" +
                    "hould be created using a generic set of step definitions", ProgrammingLanguage.CSharp, new string[] {
                        "Sprint0",
                        "StewartArmbrecht"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Define Documentation Features")))
            {
                Protiviti.Boilerplate.Test.Features.ProductManagement.BacklogManagement.DefineDocumentationFeaturesFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Specify a page to load")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Define Documentation Features")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        public virtual void SpecifyAPageToLoad()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Specify a page to load", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
  testRunner.Given("I have access to the solution", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
  testRunner.Then("I should be able to define a scenario with the following step", "When I view the \"ReadMe\" markdown file", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 13
  testRunner.And("the step should load a browser and point it at the URL that renders the markdown " +
                    "file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Specify a title for a page")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Define Documentation Features")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        public virtual void SpecifyATitleForAPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Specify a title for a page", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
  testRunner.Given("I have access to the solution", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
  testRunner.Then("I should be able to define a scenario with the following step", "Then I should see the \"README\" page", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 21
  testRunner.And("the step should verify the current page has an h1 with the text specified in the " +
                    "parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Specify a section that should be on a page")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Define Documentation Features")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        public virtual void SpecifyASectionThatShouldBeOnAPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Specify a section that should be on a page", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
  testRunner.Given("I have access to the solution", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
  testRunner.Then("I should be able to define a scenario with the following step", "Then I should see a \"Getting Started\" section", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 29
  testRunner.And("the step should verify the current page has an h2 with the text specified in the " +
                    "parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Specify a set of links that should be in a section")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Define Documentation Features")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        public virtual void SpecifyASetOfLinksThatShouldBeInASection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Specify a set of links that should be in a section", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
  testRunner.Given("I have access to the solution", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 33
  testRunner.Then("I should be able to define a scenario with the following step", "And the \"Getting Started\" section should contain the following links\r\n| LinkText " +
                    "                         |\r\n| Installing the Prerequisites      |\r\n| Getting Acc" +
                    "ess to the Source Code |\r\n| Running the Application           |", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
  testRunner.And("the step should verify the current page has an h2 with the text specified in the " +
                    "parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
  testRunner.And("the step should verify the page has the specified links before the next h2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Follow a link on a page")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Define Documentation Features")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        public virtual void FollowALinkOnAPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Follow a link on a page", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line 45
  testRunner.Given("I have access to the solution", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 46
  testRunner.Then("I should be able to define a scenario with the following step", "And I click the \"Installing the Prerequisites\" link", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 50
  testRunner.And("the step should verify the current page has an anchor with the text specified in " +
                    "the parameter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Follow a link in a section")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Define Documentation Features")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        public virtual void FollowALinkInASection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Follow a link in a section", ((string[])(null)));
#line 52
this.ScenarioSetup(scenarioInfo);
#line 53
  testRunner.Given("I have access to the solution", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 54
  testRunner.Then("I should be able to define a scenario with the following step", "And I click the \"Installing the Prerequisites\" link in the \"Getting Started\" sect" +
                    "ion", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 58
  testRunner.And("the step should verify the current page has an anchor with the text specified in " +
                    "the parameter in the section specified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Describe the content of a section")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Define Documentation Features")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        public virtual void DescribeTheContentOfASection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Describe the content of a section", ((string[])(null)));
#line 60
this.ScenarioSetup(scenarioInfo);
#line 61
  testRunner.Given("I have access to the solution", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 62
  testRunner.Then("I should be able to define a scenario with the following step", "And the \"Overview\" section should \"give an overview of the steps for installing a" +
                    "ll components need to run the solution\"", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 66
  testRunner.And("the step should do nothing but pass", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Documenation Scenario Page Structure Validation Example")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Define Documentation Features")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        public virtual void DocumenationScenarioPageStructureValidationExample()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Documenation Scenario Page Structure Validation Example", ((string[])(null)));
#line 68
this.ScenarioSetup(scenarioInfo);
#line 69
  testRunner.Given("I am a developer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 70
  testRunner.When("I view the \"ReadMeSample\" markdown file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 71
  testRunner.Then("I should see a \"Sample Section\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "LinkText"});
            table1.AddRow(new string[] {
                        "Sample Page 1"});
            table1.AddRow(new string[] {
                        "Sample Page 2"});
            table1.AddRow(new string[] {
                        "Sample Page 3"});
#line 72
  testRunner.And("the \"Sample Section\" section should contain the following links", ((string)(null)), table1, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Documenation Scenario Page Location Validation Example")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Define Documentation Features")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        public virtual void DocumenationScenarioPageLocationValidationExample()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Documenation Scenario Page Location Validation Example", ((string[])(null)));
#line 78
this.ScenarioSetup(scenarioInfo);
#line 79
 testRunner.Given("I am a developer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 80
 testRunner.When("I view the \"ReadMeSample\" markdown file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 81
  testRunner.And("I click the \"Sample Page 1\" link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.Then("I should see the \"Sample Page 1\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 83
  testRunner.And("the page should \"say I am an example of a page in the documentation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Click Link in a Section")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Define Documentation Features")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        public virtual void ClickLinkInASection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Click Link in a Section", ((string[])(null)));
#line 85
this.ScenarioSetup(scenarioInfo);
#line 86
 testRunner.Given("I am a developer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 87
 testRunner.When("I view the \"ReadMeSample\" markdown file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 88
  testRunner.And("I click the \"Sample Page X\" link in the \"Sample Section X\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
 testRunner.Then("I should see the \"Sample Page X\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 90
  testRunner.And("the page should \"say I am an example of a page in the documentation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate a List Item is in a Section")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Define Documentation Features")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        public virtual void ValidateAListItemIsInASection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate a List Item is in a Section", ((string[])(null)));
#line 92
this.ScenarioSetup(scenarioInfo);
#line 93
 testRunner.Given("I am a developer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 94
 testRunner.When("I view the \"ReadMeSample\" markdown file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
  testRunner.And("I click the \"Sample Page X\" link in the \"Sample Section X\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.Then("I should see the \"Sample Page X\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 97
  testRunner.And("I should see a \"Sample Section Y\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
  testRunner.And("the \"Sample Section Y\" section should include a list item with the text \"This is " +
                    "my list item\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate a List Item is in a Section When the List Item Contains a Quote By Using" +
            " Two Single Quotes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Define Documentation Features")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        public virtual void ValidateAListItemIsInASectionWhenTheListItemContainsAQuoteByUsingTwoSingleQuotes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate a List Item is in a Section When the List Item Contains a Quote By Using" +
                    " Two Single Quotes", ((string[])(null)));
#line 100
this.ScenarioSetup(scenarioInfo);
#line 101
 testRunner.Given("I am a developer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 102
 testRunner.When("I view the \"ReadMeSample\" markdown file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 103
  testRunner.And("I click the \"Sample Page X\" link in the \"Sample Section X\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
 testRunner.Then("I should see the \"Sample Page X\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 105
  testRunner.And("I should see a \"Sample Section Y\" section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
  testRunner.And("the \"Sample Section Y\" section should include a list item with the text \"This is " +
                    "my list item \'\'with a quote\'\'\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Documenation Scenario Page Deep Location Validation Example")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Define Documentation Features")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        public virtual void DocumenationScenarioPageDeepLocationValidationExample()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Documenation Scenario Page Deep Location Validation Example", ((string[])(null)));
#line 108
this.ScenarioSetup(scenarioInfo);
#line 109
 testRunner.Given("I am a developer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 110
 testRunner.When("I view the \"ReadMeSample\" markdown file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 111
  testRunner.And("I click the \"Sample Page 1\" link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
  testRunner.And("I click the \"Sample Page 1.1\" link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.Then("I should see the \"Sample Page 1.1\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 114
  testRunner.And("the page should \"say I am an example of a page in the documentation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
