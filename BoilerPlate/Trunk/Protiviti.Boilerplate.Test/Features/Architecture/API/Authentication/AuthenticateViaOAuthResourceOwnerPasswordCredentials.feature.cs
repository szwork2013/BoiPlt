// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Protiviti.Boilerplate.Test.Features.Architecture.API.Authentication
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class OAuthResourceOwnerPasswordCredentialsGrantFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AuthenticateViaOAuthResourceOwnerPasswordCredentials.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "OAuthResourceOwnerPasswordCredentialsGrant", "In order to provide authentication feature in Asp.Net web Api\r\nAs a team member\r\n" +
                    "I want to use the OAuth resource owner password credential grant feature", ProgrammingLanguage.CSharp, new string[] {
                        "Sprint1",
                        "AjaySingh",
                        "Authentication"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "OAuthResourceOwnerPasswordCredentialsGrant")))
            {
                Protiviti.Boilerplate.Test.Features.Architecture.API.Authentication.OAuthResourceOwnerPasswordCredentialsGrantFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate OAuth Token Access URL")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AjaySingh")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Authentication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("OAuthResourceOwnerPasswordCredentialsGrant")]
        public virtual void ValidateOAuthTokenAccessURL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate OAuth Token Access URL", new string[] {
                        "OAuthResourceOwnerPasswordCredentialsGrant"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("I am a team member and I want to get access token for accessing secured API resou" +
                    "rces", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
 testRunner.And("I created the post request \"grant_type=password&username=admin@protiviti.com&pass" +
                    "word=Admin@123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.When("I make a call to \"/token\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("I should get a valid response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Resource Owner Get Access Token By Passing Valid Credentials and Grant Type")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AjaySingh")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Authentication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("OAuthResourceOwnerPasswordCredentialsGrant")]
        public virtual void ResourceOwnerGetAccessTokenByPassingValidCredentialsAndGrantType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resource Owner Get Access Token By Passing Valid Credentials and Grant Type", new string[] {
                        "OAuthResourceOwnerPasswordCredentialsGrant"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I am a team member and I want to get access token for accessing secured API resou" +
                    "rces", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.And("I created the post request \"grant_type=password&username=admin@protiviti.com&pass" +
                    "word=Admin@123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.When("I make a call to \"/token\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("I should get the access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Authorization Server Must Return the Same UserName As Passed With Valid Credentia" +
            "ls")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AjaySingh")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Authentication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("OAuthResourceOwnerPasswordCredentialsGrant")]
        public virtual void AuthorizationServerMustReturnTheSameUserNameAsPassedWithValidCredentials()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Authorization Server Must Return the Same UserName As Passed With Valid Credentia" +
                    "ls", new string[] {
                        "OAuthResourceOwnerPasswordCredentialsGrant"});
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("I am a team member and I want to get access token for accessing secured API resou" +
                    "rces", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
 testRunner.And("I created the post request \"grant_type=password&username=admin@protiviti.com&pass" +
                    "word=Admin@123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.When("I make a call to \"/token\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("I should get the access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
 testRunner.And("I should get the same username as passed with credentials for e.g. admin@protivit" +
                    "i.com", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Valid Access Token Expiration Is Set For 1 Day")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AjaySingh")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Authentication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("OAuthResourceOwnerPasswordCredentialsGrant")]
        public virtual void ValidAccessTokenExpirationIsSetFor1Day()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid Access Token Expiration Is Set For 1 Day", new string[] {
                        "OAuthResourceOwnerPasswordCredentialsGrant"});
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given("I am a team member and I want to get access token for accessing secured API resou" +
                    "rces", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
 testRunner.And("I created the post request \"grant_type=password&username=admin@protiviti.com&pass" +
                    "word=Admin@123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.When("I make a call to \"/token\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.Then("I should get the access token which expires in 1 day", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Valid Request With Valid Credentials Returns Bearer Access Token Type")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AjaySingh")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Authentication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("OAuthResourceOwnerPasswordCredentialsGrant")]
        public virtual void ValidRequestWithValidCredentialsReturnsBearerAccessTokenType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid Request With Valid Credentials Returns Bearer Access Token Type", new string[] {
                        "OAuthResourceOwnerPasswordCredentialsGrant"});
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("I am a team member and I want to get access token for accessing secured API resou" +
                    "rces", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
 testRunner.And("I created the post request \"grant_type=password&username=admin@protiviti.com&pass" +
                    "word=Admin@123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.When("I make a call to \"/token\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.Then("I should get the access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 46
 testRunner.And("I should get the Bearer access token type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Accessing Secured Resource Using Valid Access Token")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AjaySingh")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Authentication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("OAuthResourceOwnerPasswordCredentialsGrant")]
        public virtual void AccessingSecuredResourceUsingValidAccessToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Accessing Secured Resource Using Valid Access Token", new string[] {
                        "OAuthResourceOwnerPasswordCredentialsGrant"});
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("I am a team member and I want to access secured API resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
 testRunner.And("I have a valid access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.When("I make a call to secure resource employee \"/api/employee\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.Then("I should get the list of employees where total count should be greater than Zero", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void ResourceOwnerCredentialsGrantFailIfPassIncorrectRequestParameterValuesForGrantTypeUserNameAndPassword(string granttype, string username, string password, string remarks, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "OAuthResourceOwnerPasswordCredentialsGrant"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resource Owner Credentials Grant Fail if Pass Incorrect Request Parameter Values " +
                    "for GrantType, UserName and Password", @__tags);
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.Given("I am a team member and I want to get access token for accessing secured API resou" +
                    "rces", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 58
 testRunner.And(string.Format("I created the post request with incorrect values for parameters grant_type \"{0}\" " +
                        ", username \"{1}\" and password \"{2}\"", granttype, username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
 testRunner.When("I make a call to \"/token\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
 testRunner.Then("I should not get the access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Resource Owner Credentials Grant Fail if Pass Incorrect Request Parameter Values " +
            "for GrantType, UserName and Password")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AjaySingh")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Authentication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:granttype", "password")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:username", "testuser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:password", "Admin@123")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:remarks", "Invalid user Name")]
        public virtual void ResourceOwnerCredentialsGrantFailIfPassIncorrectRequestParameterValuesForGrantTypeUserNameAndPassword_Variant0()
        {
            this.ResourceOwnerCredentialsGrantFailIfPassIncorrectRequestParameterValuesForGrantTypeUserNameAndPassword("password", "testuser", "Admin@123", "Invalid user Name", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Resource Owner Credentials Grant Fail if Pass Incorrect Request Parameter Values " +
            "for GrantType, UserName and Password")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AjaySingh")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Authentication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:granttype", "password")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:username", "admin@protiviti.com")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:password", "testpassword")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:remarks", "Invalid password")]
        public virtual void ResourceOwnerCredentialsGrantFailIfPassIncorrectRequestParameterValuesForGrantTypeUserNameAndPassword_Variant1()
        {
            this.ResourceOwnerCredentialsGrantFailIfPassIncorrectRequestParameterValuesForGrantTypeUserNameAndPassword("password", "admin@protiviti.com", "testpassword", "Invalid password", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Resource Owner Credentials Grant Fail if Pass Incorrect Request Parameter Values " +
            "for GrantType, UserName and Password")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AjaySingh")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Authentication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:granttype", "testgranttype")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:username", "admin@protiviti.com")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:password", "Admin@123")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:remarks", "Invalid grant type")]
        public virtual void ResourceOwnerCredentialsGrantFailIfPassIncorrectRequestParameterValuesForGrantTypeUserNameAndPassword_Variant2()
        {
            this.ResourceOwnerCredentialsGrantFailIfPassIncorrectRequestParameterValuesForGrantTypeUserNameAndPassword("testgranttype", "admin@protiviti.com", "Admin@123", "Invalid grant type", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Resource Owner Credentials Grant Fail if Pass Incorrect Request Parameter Values " +
            "for GrantType, UserName and Password")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AjaySingh")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Authentication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:granttype", "testgranttype")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:username", "testuser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:password", "testpassword")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:remarks", "All 3 values are invalid")]
        public virtual void ResourceOwnerCredentialsGrantFailIfPassIncorrectRequestParameterValuesForGrantTypeUserNameAndPassword_Variant3()
        {
            this.ResourceOwnerCredentialsGrantFailIfPassIncorrectRequestParameterValuesForGrantTypeUserNameAndPassword("testgranttype", "testuser", "testpassword", "All 3 values are invalid", ((string[])(null)));
        }
        
        public virtual void ResourceOwnerCredentialsGrantReturnErrorInvalid_GrantIfPassIncorrectUserNameAndPassword(string username, string password, string remarks, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "OAuthResourceOwnerPasswordCredentialsGrant"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resource Owner Credentials Grant Return Error \"invalid_grant\" if Pass Incorrect U" +
                    "serName and Password", @__tags);
#line 69
this.ScenarioSetup(scenarioInfo);
#line 70
 testRunner.Given("I am a team member and I want to get access token for accessing secured API resou" +
                    "rces", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 71
 testRunner.And(string.Format("I created the post request with incorrect values for parameters username \"{0}\" an" +
                        "d password \"{1}\"", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.When("I make a call to \"/token\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
 testRunner.Then("I should get error of invalid grant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Resource Owner Credentials Grant Return Error \"invalid_grant\" if Pass Incorrect U" +
            "serName and Password")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AjaySingh")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Authentication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:username", "testuser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:password", "Admin@123")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:remarks", "Invalid user Name")]
        public virtual void ResourceOwnerCredentialsGrantReturnErrorInvalid_GrantIfPassIncorrectUserNameAndPassword_Variant0()
        {
            this.ResourceOwnerCredentialsGrantReturnErrorInvalid_GrantIfPassIncorrectUserNameAndPassword("testuser", "Admin@123", "Invalid user Name", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Resource Owner Credentials Grant Return Error \"invalid_grant\" if Pass Incorrect U" +
            "serName and Password")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AjaySingh")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Authentication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:username", "admin@protiviti.com")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:password", "testpassword")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:remarks", "Invalid password")]
        public virtual void ResourceOwnerCredentialsGrantReturnErrorInvalid_GrantIfPassIncorrectUserNameAndPassword_Variant1()
        {
            this.ResourceOwnerCredentialsGrantReturnErrorInvalid_GrantIfPassIncorrectUserNameAndPassword("admin@protiviti.com", "testpassword", "Invalid password", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Resource Owner Credentials Grant Return Error \"invalid_grant\" if Pass Incorrect U" +
            "serName and Password")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AjaySingh")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Authentication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:username", "testuser")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:password", "testpassword")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:remarks", "Both values are invalid")]
        public virtual void ResourceOwnerCredentialsGrantReturnErrorInvalid_GrantIfPassIncorrectUserNameAndPassword_Variant2()
        {
            this.ResourceOwnerCredentialsGrantReturnErrorInvalid_GrantIfPassIncorrectUserNameAndPassword("testuser", "testpassword", "Both values are invalid", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Resource Owner Credentials Grant Return Error \"unsupported_grant_type\" if Pass In" +
            "valid Grant Type")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AjaySingh")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Authentication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("OAuthResourceOwnerPasswordCredentialsGrant")]
        public virtual void ResourceOwnerCredentialsGrantReturnErrorUnsupported_Grant_TypeIfPassInvalidGrantType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resource Owner Credentials Grant Return Error \"unsupported_grant_type\" if Pass In" +
                    "valid Grant Type", new string[] {
                        "OAuthResourceOwnerPasswordCredentialsGrant"});
#line 81
this.ScenarioSetup(scenarioInfo);
#line 82
 testRunner.Given("I am a team member and I want to get access token for accessing secured API resou" +
                    "rces", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 83
 testRunner.And("I created the post request with invalid grant type \"grant_type=<testgranttype>&us" +
                    "ername=admin@protiviti.com&password=Admin@123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.When("I make a call to \"/token\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
 testRunner.Then("I should get error of unsupported grant type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Resource Owner Credentials Grant Fails if Valid Grant Type But Not Of Resource Ow" +
            "ner Credentials Type i.e password")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "OAuthResourceOwnerPasswordCredentialsGrant")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AjaySingh")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Authentication")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("OAuthResourceOwnerPasswordCredentialsGrant")]
        public virtual void ResourceOwnerCredentialsGrantFailsIfValidGrantTypeButNotOfResourceOwnerCredentialsTypeI_EPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resource Owner Credentials Grant Fails if Valid Grant Type But Not Of Resource Ow" +
                    "ner Credentials Type i.e password", new string[] {
                        "OAuthResourceOwnerPasswordCredentialsGrant"});
#line 88
this.ScenarioSetup(scenarioInfo);
#line 89
 testRunner.Given("I am a team member and I want to get access token for accessing secured API resou" +
                    "rces", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 90
 testRunner.And("I created the post request with incorrect grant type \"grant_type=client_credentia" +
                    "ls&username=admin@protiviti.com&password=Admin@123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 91
 testRunner.When("I make a call to \"/token\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 92
 testRunner.Then("I should get error of unauthorized client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
