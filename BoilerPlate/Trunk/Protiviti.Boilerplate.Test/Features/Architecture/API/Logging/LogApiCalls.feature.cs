// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Protiviti.Boilerplate.Test.Features.Architecture.API.Logging
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class LogAPICallsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "LogApiCalls.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Log API Calls", "In order to debug and trouble shoot the application\nAs a developer\nI want the sys" +
                    "tem to log all api calls when a special configuration flag is set", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Log API Calls")))
            {
                Protiviti.Boilerplate.Test.Features.Architecture.API.Logging.LogAPICallsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Logging Turned Off")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Log API Calls")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Hanna")]
        public virtual void LoggingTurnedOff()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Logging Turned Off", new string[] {
                        "Hanna"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have set the api logging level to \"none\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("I make a request to the api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property Name",
                        "Property Type",
                        "Description"});
            table1.AddRow(new string[] {
                        "Date",
                        "Date",
                        "Null"});
            table1.AddRow(new string[] {
                        "OriginatingIP",
                        "String",
                        "Null"});
            table1.AddRow(new string[] {
                        "ServerName",
                        "String",
                        "Null"});
            table1.AddRow(new string[] {
                        "ServerIP",
                        "String",
                        "Null"});
            table1.AddRow(new string[] {
                        "UserId",
                        "String",
                        "Null"});
            table1.AddRow(new string[] {
                        "RequestURL",
                        "String",
                        "Null"});
            table1.AddRow(new string[] {
                        "RequestPath",
                        "String",
                        "Null"});
            table1.AddRow(new string[] {
                        "RequestQueryString",
                        "String",
                        "Null"});
            table1.AddRow(new string[] {
                        "RequestBody",
                        "String",
                        "Null"});
            table1.AddRow(new string[] {
                        "RequestHeaders",
                        "String",
                        "Null"});
            table1.AddRow(new string[] {
                        "RequestSize",
                        "Number",
                        "Null"});
            table1.AddRow(new string[] {
                        "ResponseDuration",
                        "Number",
                        "Null"});
            table1.AddRow(new string[] {
                        "ResponseCode",
                        "String",
                        "Null"});
            table1.AddRow(new string[] {
                        "ResponseBody",
                        "String",
                        "Null"});
            table1.AddRow(new string[] {
                        "ResponseHeaders",
                        "String",
                        "Null"});
            table1.AddRow(new string[] {
                        "ResponseSize",
                        "Number",
                        "Null"});
#line 10
 testRunner.Then("the request should not be logged to the database", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Logging Turned On")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Log API Calls")]
        public virtual void LoggingTurnedOn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Logging Turned On", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given("I have set the api logging level to \"all\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.When("I make a request to the api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property Name",
                        "Property Type",
                        "Description"});
            table2.AddRow(new string[] {
                        "Date",
                        "Date",
                        "The date the request was made."});
            table2.AddRow(new string[] {
                        "OriginatingIP",
                        "String",
                        "The IP address the request came from."});
            table2.AddRow(new string[] {
                        "ServerName",
                        "String",
                        "The name of the server that got the request."});
            table2.AddRow(new string[] {
                        "ServerIP",
                        "String",
                        "The ip address of the server that received the request."});
            table2.AddRow(new string[] {
                        "UserId",
                        "String",
                        "The id of the user that issued the request."});
            table2.AddRow(new string[] {
                        "RequestURL",
                        "String",
                        "The full URL of the request."});
            table2.AddRow(new string[] {
                        "RequestPath",
                        "String",
                        "The path of the request. Url minus domain and request paramters."});
            table2.AddRow(new string[] {
                        "RequestQueryString",
                        "String",
                        "The query string of the URL."});
            table2.AddRow(new string[] {
                        "RequestBody",
                        "String",
                        "Serialized body of the request."});
            table2.AddRow(new string[] {
                        "RequestHeaders",
                        "String",
                        "Serialized array of the request headers."});
            table2.AddRow(new string[] {
                        "RequestSize",
                        "Number",
                        "The size in bytes for the total request."});
            table2.AddRow(new string[] {
                        "ResponseDuration",
                        "Number",
                        "The number of miliseconds from the request to the response."});
            table2.AddRow(new string[] {
                        "ResponseCode",
                        "String",
                        "The http status code of the reponse."});
            table2.AddRow(new string[] {
                        "ResponseBody",
                        "String",
                        "Serialized body of the response."});
            table2.AddRow(new string[] {
                        "ResponseHeaders",
                        "String",
                        "Serialized array of the response headers."});
            table2.AddRow(new string[] {
                        "ResponseSize",
                        "Number",
                        "The size bytes for the total response."});
#line 32
 testRunner.Then("the request should be logged to the database with the following properties", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
