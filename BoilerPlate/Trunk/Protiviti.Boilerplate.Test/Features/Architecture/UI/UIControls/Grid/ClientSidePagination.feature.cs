// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Protiviti.Boilerplate.Test.Features.Architecture.UI.UIControls.Grid
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ClientSidePaginationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ClientSidePagination.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ClientSidePagination", "In order to optimize subsequent page loads for a small data set\r\nAs a user\r\nI wan" +
                    "t to be able to retrieve data for my grid from the server all at once but displa" +
                    "y only one page at a time", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "ClientSidePagination")))
            {
                Protiviti.Boilerplate.Test.Features.Architecture.UI.UIControls.Grid.ClientSidePaginationFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "MyString",
                        "MyInt",
                        "MyDecimal",
                        "MyFloat",
                        "FirstName",
                        "LastName"});
            table1.AddRow(new string[] {
                        "abc",
                        "5",
                        "1.463",
                        "1.463",
                        "Jane",
                        "Doe"});
            table1.AddRow(new string[] {
                        "def",
                        "1",
                        "1.464",
                        "1.464",
                        "Julie",
                        "Doe"});
            table1.AddRow(new string[] {
                        "aaa",
                        "323",
                        "74.34",
                        "12.12",
                        "Stanley",
                        "Brady"});
            table1.AddRow(new string[] {
                        "lalalala",
                        "52",
                        "-12.0",
                        "345.2",
                        "Horace",
                        "Franklin"});
            table1.AddRow(new string[] {
                        "ccc",
                        "5",
                        "1.463",
                        "1.463",
                        "Phillip",
                        "Brown"});
            table1.AddRow(new string[] {
                        "ccc",
                        "1",
                        "1.464",
                        "1.464",
                        "Ralph",
                        "Stoller"});
            table1.AddRow(new string[] {
                        "abd",
                        "334",
                        "74.34",
                        "12.12",
                        "Alice",
                        "Brady"});
            table1.AddRow(new string[] {
                        "baa",
                        "5",
                        "-12.0",
                        "345.2",
                        "Aaliyah",
                        "Franklin"});
            table1.AddRow(new string[] {
                        "ras",
                        "5214",
                        "1.463",
                        "1.463",
                        "Jane",
                        "Doe"});
            table1.AddRow(new string[] {
                        "ak",
                        "1",
                        "1.464",
                        "1.464",
                        "Sherice",
                        "James"});
            table1.AddRow(new string[] {
                        "out",
                        "31",
                        "74.34",
                        "12.12",
                        "Stanley",
                        "Green"});
#line 7
 testRunner.Given("a database table \"Data\" having the following rows:", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Grid shows the correct page numbers")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ClientSidePagination")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Shira")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SalehComplete")]
        public virtual void GridShowsTheCorrectPageNumbers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Grid shows the correct page numbers", new string[] {
                        "Sprint0",
                        "Shira",
                        "Sal",
                        "SalehComplete"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 23
 testRunner.Given("I am viewing a client-side paginated grid generated from table \"Data\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.And("the grid \"Local Data Grid with Sort and Filter\" has 3 lines per page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.When("I view the grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
 testRunner.Then("Page numbers showing is total Items devided by lines allowed by grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("First page loads with server side pagination")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ClientSidePagination")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Shira")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sal")]
        public virtual void FirstPageLoadsWithServerSidePagination()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("First page loads with server side pagination", new string[] {
                        "Sprint0",
                        "Shira",
                        "Sal"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 30
 testRunner.Given("I am at the application \"Home\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.When("I press the \"GridDemo\" tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
 testRunner.And("the grid \"Local Data Grid with Sort and Filter\" has 3 lines per page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.Then("The page with the grid loads and all of the lines of data are retrieved from the " +
                    "server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
 testRunner.And("The first 3 lines of data are displayed in the grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And("the page number 1 is highlighted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Clicked page number loads one page of data from the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ClientSidePagination")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        public virtual void ClickedPageNumberLoadsOnePageOfDataFromTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clicked page number loads one page of data from the server", new string[] {
                        "ignore"});
#line 39
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 40
 testRunner.Given("I am viewing a client-side paginated grid generated from table \"Data\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
 testRunner.And("the grid has 3 lines per page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.When("I click on page 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
 testRunner.Then("nothing is retrieved from the server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
 testRunner.And("Lines 7-9 are displayed in the grid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Load the grid demo page")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ClientSidePagination")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("SalehComplete")]
        public virtual void LoadTheGridDemoPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Load the grid demo page", new string[] {
                        "Sprint0",
                        "Sal",
                        "SalehComplete"});
#line 49
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 50
 testRunner.Given("I am at the  \"Home\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
 testRunner.When("I press the \"GridDemo\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
 testRunner.Then("GridDemo Page should successfully load in the browser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Load data from DB to the Grid tables")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ClientSidePagination")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        public virtual void LoadDataFromDBToTheGridTables()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Load data from DB to the Grid tables", new string[] {
                        "ignore"});
#line 56
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 57
 testRunner.Given("I am at the  \"GridDemo\" page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 58
 testRunner.Then("the data populated in the Grid tables should be coming from DB.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
