// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Protiviti.Boilerplate.Test.Features.Architecture.Docs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ValidateDocumentationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ValidateDocumentation.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Validate Documentation", "In order to ensure that all documentation is up to date and relevant\r\nAs a team m" +
                    "ember\r\nI want the testing infrastructure to automaically identify documentation " +
                    "problems", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Validate Documentation")))
            {
                Protiviti.Boilerplate.Test.Features.Architecture.Docs.ValidateDocumentationFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate All Documentation Pages")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateAllDocumentationPages()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate All Documentation Pages", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("I run the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
    testRunner.Then("all links in the documentation should be to valid pages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Missing Page")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageMissingPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Missing Page", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
  testRunner.And("I have a documentation page \"that is missing\" at \"/Sample/MissingPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
  testRunner.Then("the validators error messages should read", "The root page of \'{rootUrl}/Sample/MissingPage\' can not be found.", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Link Returns 404 Status Code")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageLinkReturns404StatusCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Link Returns 404 Status Code", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
  testRunner.And("I have a documentation page \"with a link that gets a 404 status\" at \"/Sample/Site" +
                    "Validator/My404LinkPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
  testRunner.And("the page has \"John Reviewer\" tagged as the owner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
  testRunner.And("the test settings have \"Sprint9\" set as the current sprint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
  testRunner.And("the test settings have a \"Could\" priority for resolving \"LinkRequestNonSuccessSta" +
                    "tusCode\" errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/My404LinkPage\'\r\n    LinkRequestNonSuccessStatusCode - The \'My 404 Link\' link " +
                    "with an href of \'/ThisPageDoesNotExist\' returned a NotFound status\r\n", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
  testRunner.And("the validators resolution scenarios should read", @"The following are recommended resolution scenarios:
  @Sprint9 @JohnReviewer @Could
  Scenario: Valid response from the 'My 404 Link' link on the page at '{rootUrl}/Sample/SiteValidator/My404LinkPage'
    Given I am a team member
    When I navigate to the ""{rootUrl}/Sample/SiteValidator/My404LinkPage"" page
    And I click the ""My 404 Link"" link
    Then I should get a valid response
", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Link Throws Exception")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageLinkThrowsException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Link Throws Exception", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
  testRunner.And("I have a documentation page \"with a link that causes an exception\" at \"/Sample/Si" +
                    "teValidator/MyExceptionLinkPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
  testRunner.And("the page has \"Sally Reviewer\" tagged as the owner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
  testRunner.And("the test settings have \"Sprint12\" set as the current sprint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
  testRunner.And("the test settings have a \"Must\" priority for resolving \"LinkRequestException\" err" +
                    "ors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
  testRunner.Then("the validators error messages should read", @"The following pages had validation errors:
  Page: '{rootUrl}/Sample/SiteValidator/MyExceptionLinkPage'
    LinkRequestException - The 'My Exception Link' link with an href of 'htDp://ww.noworky' caused an exception with a message of 'Only 'http' and 'https' schemes are allowed.
Parameter name: requestUri'
", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 63
  testRunner.And("the validators resolution scenarios should read", @"The following are recommended resolution scenarios:
  @Sprint12 @SallyReviewer @Must
  Scenario: Valid response from the 'My Exception Link' link on the page at '{rootUrl}/Sample/SiteValidator/MyExceptionLinkPage'
    Given I am a team member
    When I navigate to the ""{rootUrl}/Sample/SiteValidator/MyExceptionLinkPage"" page
    And I click the ""My Exception Link"" link
    Then I should get a valid response
", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Missing Title")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageMissingTitle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Missing Title", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 76
this.ScenarioSetup(scenarioInfo);
#line 77
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 78
  testRunner.And("I have a documentation page \"with a missing title\" at \"/Sample/SiteValidator/MyMi" +
                    "ssingTitlePage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/MyMissingTitlePage\'\r\n    DocMissingTitle - The page does not have an h1 at th" +
                    "e top to serve as a title.\r\n", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Mulitple Titles")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageMulitpleTitles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Mulitple Titles", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 88
this.ScenarioSetup(scenarioInfo);
#line 89
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 90
  testRunner.And("I have a documentation page \"with multiple titles\" at \"/Sample/SiteValidator/MyMu" +
                    "ltipleTitlePage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 91
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 92
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/MyMultipleTitlePage\'\r\n    DocMultipleTitles - The page has multiple \'h1\' tags" +
                    ".  Please remove all but one and place it at the top of the page.\r\n", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Empty Owner Tag")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageEmptyOwnerTag()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Empty Owner Tag", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 101
this.ScenarioSetup(scenarioInfo);
#line 102
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 103
  testRunner.And("I have a documentation page \"with an empty owner tag\" at \"/Sample/SiteValidator/M" +
                    "yEmptyOwnerPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 105
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/MyEmptyOwnerPage\'\r\n    DocImproperOwnerTag - Could not find a value in the ow" +
                    "ner tag.  The inner text format should match \'Page Owner: [NAME]\'.\r\n", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Multiple Owner Tag")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageMultipleOwnerTag()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Multiple Owner Tag", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 113
this.ScenarioSetup(scenarioInfo);
#line 114
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 115
  testRunner.And("I have a documentation page \"with multiple owner tags\" at \"/Sample/SiteValidator/" +
                    "MyMultipleOwnerPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 116
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 117
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/MyMultipleOwnerPage\'\r\n    DocMultipleOwnerTags - There are multiple owner tag" +
                    "s.  Please remove all but one.\r\n", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Mislabeled Owner Tag")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageMislabeledOwnerTag()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Mislabeled Owner Tag", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 125
this.ScenarioSetup(scenarioInfo);
#line 126
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 127
  testRunner.And("I have a documentation page \"with a mislabeled owner tag\" at \"/Sample/SiteValidat" +
                    "or/MyMislabeledOwnerPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 128
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 129
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/MyMislabeledOwnerPage\'\r\n    DocImproperOwnerTag - Could not find a value in t" +
                    "he owner tag.  The inner text format should match \'Page Owner: [NAME]\'.\r\n", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Empty Reviewer Tag")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageEmptyReviewerTag()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Empty Reviewer Tag", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 137
this.ScenarioSetup(scenarioInfo);
#line 138
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 139
  testRunner.And("I have a documentation page \"with an empty reviewer tag\" at \"/Sample/SiteValidato" +
                    "r/MyEmptyReviewerPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 141
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/MyEmptyReviewerPage\'\r\n    DocImproperReviewerTag - Could not find a value in " +
                    "the reviewer tag.  The inner text format should match \'Page Reviewer: [NAME]\'.\r\n" +
                    "", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Multiple Reviewer Tag")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageMultipleReviewerTag()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Multiple Reviewer Tag", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 149
this.ScenarioSetup(scenarioInfo);
#line 150
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 151
  testRunner.And("I have a documentation page \"with multiple reviewer tags\" at \"/Sample/SiteValidat" +
                    "or/MyMultipleReviewerPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 153
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/MyMultipleReviewerPage\'\r\n    DocMultipleReviewerTags - There are multiple rev" +
                    "iewer tags.  Please remove all but one.\r\n", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Mislabeled Reviewer Tag")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageMislabeledReviewerTag()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Mislabeled Reviewer Tag", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 161
this.ScenarioSetup(scenarioInfo);
#line 162
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 163
  testRunner.And("I have a documentation page \"with a mislabeled reviewer tag\" at \"/Sample/SiteVali" +
                    "dator/MyMislabeledReviewerPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 165
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/MyMislabeledReviewerPage\'\r\n    DocImproperReviewerTag - Could not find a valu" +
                    "e in the reviewer tag.  The inner text format should match \'Page Reviewer: [NAME" +
                    "]\'.\r\n", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Missing Updated Tag")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageMissingUpdatedTag()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Missing Updated Tag", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 174
this.ScenarioSetup(scenarioInfo);
#line 175
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 176
  testRunner.And("I have a documentation page \"with a missing updated tag\" at \"/Sample/SiteValidato" +
                    "r/MyMissingUpdatedTagPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 178
  testRunner.Then("the validators error messages should read", @"The following pages had validation errors:
  Page: '{rootUrl}/Sample/SiteValidator/MyMissingUpdatedTagPage'
    DocMissingUpdatedTag - The page does not have an updated tag.  Please add '<p class=""updated"">Updated on [DATE] by [PERSON]</p> to the page.  Just copy it into the markdown file and then replace the [DATE] and [PERSON] fields with the actual date and the person that updated the page.
", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Updated Tag Invalid")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageUpdatedTagInvalid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Updated Tag Invalid", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 186
this.ScenarioSetup(scenarioInfo);
#line 187
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 188
  testRunner.And("I have a documentation page \"with a page that is has an invalide updated text\" at" +
                    " \"/Sample/SiteValidator/MyInvalidUpdatedTagPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 190
  testRunner.Then("the validators error messages should read", @"The following pages had validation errors:
  Page: '{rootUrl}/Sample/SiteValidator/MyInvalidUpdatedTagPage'
    DocInvalidUpdatedTag - The page does not have a properly formated updated tag.  Please make sure it conforms to 'Updated on [dd/mm/yy] by [NAME]'.
", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Updated Tag Invalid Date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageUpdatedTagInvalidDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Updated Tag Invalid Date", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 198
this.ScenarioSetup(scenarioInfo);
#line 199
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 200
  testRunner.And("I have a documentation page \"with a page that is has an invalid updated date\" at " +
                    "\"/Sample/SiteValidator/MyInvalidUpdatedDatePage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 201
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 202
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/MyInvalidUpdatedDatePage\'\r\n    DocInvalidUpdatedDate - The updated date is no" +
                    "t a valid date.\r\n", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Multiple Updated Tags")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageMultipleUpdatedTags()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Multiple Updated Tags", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 210
this.ScenarioSetup(scenarioInfo);
#line 211
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 212
  testRunner.And("I have a documentation page \"with multiple updated tags\" at \"/Sample/SiteValidato" +
                    "r/MyMultipleUpdatedTagPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 213
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 214
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/MyMultipleUpdatedTagPage\'\r\n    DocMultipleUpdatedTags - There are multiple up" +
                    "dated tags.  Please remove all but one.\r\n", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Updated Tag Date Is In The Future")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageUpdatedTagDateIsInTheFuture()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Updated Tag Date Is In The Future", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 222
this.ScenarioSetup(scenarioInfo);
#line 223
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 224
  testRunner.And("I have a documentation page \"with an updated date in the future\" at \"/Sample/Site" +
                    "Validator/MyFutureUpdatedTagPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 225
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 226
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/MyFutureUpdatedTagPage\'\r\n    DocFutureUpdatedDate - The updated date is in th" +
                    "e future.\r\n", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Missing Reviewed Tag")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageMissingReviewedTag()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Missing Reviewed Tag", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 235
this.ScenarioSetup(scenarioInfo);
#line 236
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 237
  testRunner.And("I have a documentation page \"with a missing reviewed tag\" at \"/Sample/SiteValidat" +
                    "or/MyMissingReviewedTagPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 238
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 239
  testRunner.Then("the validators error messages should read", @"The following pages had validation errors:
  Page: '{rootUrl}/Sample/SiteValidator/MyMissingReviewedTagPage'
    DocMissingReviewedTag - The page does not have an reviewed tag.  Please add '<p class=""reviewed"">Reviewed on [DATE] by [PERSON]</p> to the page.  Just copy it into the markdown file and then replace the [DATE] and [PERSON] fields with the actual date and the person that reviewed the page.
", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Reviewed Tag Invalid")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageReviewedTagInvalid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Reviewed Tag Invalid", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 247
this.ScenarioSetup(scenarioInfo);
#line 248
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 249
  testRunner.And("I have a documentation page \"with a page that is has an invalide reviewed text\" a" +
                    "t \"/Sample/SiteValidator/MyInvalidReviewedTagPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 250
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 251
  testRunner.Then("the validators error messages should read", @"The following pages had validation errors:
  Page: '{rootUrl}/Sample/SiteValidator/MyInvalidReviewedTagPage'
    DocInvalidReviewedTag - The page does not have a properly formated reviewed tag.  Please make sure it conforms to 'Reviewed on [dd/mm/yy] by [NAME]'.
", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Reviewed Tag Invalid Date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageReviewedTagInvalidDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Reviewed Tag Invalid Date", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 259
this.ScenarioSetup(scenarioInfo);
#line 260
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 261
  testRunner.And("I have a documentation page \"with a page that is has an invalid reviewed date\" at" +
                    " \"/Sample/SiteValidator/MyInvalidReviewedDatePage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 262
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 263
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/MyInvalidReviewedDatePage\'\r\n    DocInvalidReviewedDate - The reviewed date is" +
                    " not a valid date.\r\n", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Multiple Reviewed Tags")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageMultipleReviewedTags()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Multiple Reviewed Tags", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 271
this.ScenarioSetup(scenarioInfo);
#line 272
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 273
  testRunner.And("I have a documentation page \"with multiple reviewed tags\" at \"/Sample/SiteValidat" +
                    "or/MyMultipleReviewedTagPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 274
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 275
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/MyMultipleReviewedTagPage\'\r\n    DocMultipleReviewedTags - There are multiple " +
                    "reviewed tags.  Please remove all but one.\r\n", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Reviewed Tag Date Is In The Future")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("StewartArmbrecht")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Sprint0")]
        public virtual void ValidateDocumentationPageReviewedTagDateIsInTheFuture()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Reviewed Tag Date Is In The Future", new string[] {
                        "StewartArmbrecht",
                        "Sprint0"});
#line 283
this.ScenarioSetup(scenarioInfo);
#line 284
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 285
  testRunner.And("I have a documentation page \"with an reviewed date in the future\" at \"/Sample/Sit" +
                    "eValidator/MyFutureReviewedTagPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 286
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 287
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/MyFutureReviewedTagPage\'\r\n    DocFutureReviewedDate - The reviewed date is in" +
                    " the future.\r\n", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Reviewed Date is Older Than Updated Date With Valid R" +
            "eviewer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        public virtual void ValidateDocumentationPageReviewedDateIsOlderThanUpdatedDateWithValidReviewer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Reviewed Date is Older Than Updated Date With Valid R" +
                    "eviewer", ((string[])(null)));
#line 294
this.ScenarioSetup(scenarioInfo);
#line 295
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 296
  testRunner.And("I have a documentation page \"with a reviewed date earlier than the updated date a" +
                    "nd a valid reviewer\" at \"/Sample/SiteValidator/MyReviewedDateOlderThanUpdatedDat" +
                    "ePage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 297
  testRunner.And("the page has \"John Reviewer\" tagged as the reviewer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 298
  testRunner.And("the test settings have \"Sprint4\" set as the current sprint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 299
  testRunner.And("the test settings have a \"Must\" priority for resolving \"DocUnreviewedChange\" erro" +
                    "rs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 300
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 301
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/MyReviewedDateOlderThanUpdatedDatePage\'\r\n    DocUnreviewedChange - The review" +
                    "ed date is older than the updated date.\r\n", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 308
  testRunner.And("the validators resolution scenarios should read", @"The following are recommended resolution scenarios:
  @Sprint4 @JohnReviewer @Must
  Scenario: Page at '{rootUrl}/Sample/SiteValidator/MyReviewedDateOlderThanUpdatedDatePage' reviewed
    Given I am a team member
    When I navigate to the ""{rootUrl}/Sample/SiteValidator/MyReviewedDateOlderThanUpdatedDatePage"" page
    Then the page should be reviewed and the reviewed date should be after the updated date
", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Reviewed Date is Older Than Updated Date With Missing" +
            " Reviewer and Valid Test Settings Default")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        public virtual void ValidateDocumentationPageReviewedDateIsOlderThanUpdatedDateWithMissingReviewerAndValidTestSettingsDefault()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Reviewed Date is Older Than Updated Date With Missing" +
                    " Reviewer and Valid Test Settings Default", ((string[])(null)));
#line 318
this.ScenarioSetup(scenarioInfo);
#line 319
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 320
  testRunner.And("I have a documentation page \"with a reviewed date older than the updated date and" +
                    " a missing reviewer\" at \"/Sample/SiteValidator/MyReviewedDateOlderThanUpdatedDat" +
                    "eSettingsReviewerPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 321
  testRunner.And("the test settings have \"Sally Reviewer\" set as the default reviewer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 322
  testRunner.And("the test settings have \"Sprint4\" set as the current sprint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 323
  testRunner.And("the test settings have a \"Must\" priority for resolving \"DocUnreviewedChange\" erro" +
                    "rs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 324
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 325
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/MyReviewedDateOlderThanUpdatedDateSettingsReviewerPage\'\r\n    DocUnreviewedCha" +
                    "nge - The reviewed date is older than the updated date.\r\n", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 332
  testRunner.And("the validators resolution scenarios should read", @"The following are recommended resolution scenarios:
  @Sprint4 @SallyReviewer @Must
  Scenario: Page at '{rootUrl}/Sample/SiteValidator/MyReviewedDateOlderThanUpdatedDateSettingsReviewerPage' reviewed
    Given I am a team member
    When I navigate to the ""{rootUrl}/Sample/SiteValidator/MyReviewedDateOlderThanUpdatedDateSettingsReviewerPage"" page
    Then the page should be reviewed and the reviewed date should be after the updated date
", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Reviewed Date is Older Than Updated Date With Missing" +
            " Reviewer and Missing Test Settings Default")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        public virtual void ValidateDocumentationPageReviewedDateIsOlderThanUpdatedDateWithMissingReviewerAndMissingTestSettingsDefault()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Reviewed Date is Older Than Updated Date With Missing" +
                    " Reviewer and Missing Test Settings Default", ((string[])(null)));
#line 342
this.ScenarioSetup(scenarioInfo);
#line 343
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 344
  testRunner.And("I have a documentation page \"with a reviewed date before the updated date with a " +
                    "missing reviewer\" at \"/Sample/SiteValidator/MyReviewedDateOlderThanUpdatedDateNo" +
                    "ReviewerPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 345
  testRunner.And("the test settings are missing a default reviewer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 346
  testRunner.And("the test settings have \"Sprint4\" set as the current sprint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 347
  testRunner.And("the test settings have a \"Must\" priority for resolving \"DocUnreviewedChange\" erro" +
                    "rs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 348
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 349
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/MyReviewedDateOlderThanUpdatedDateNoReviewerPage\'\r\n    DocUnreviewedChange - " +
                    "The reviewed date is older than the updated date.\r\n", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 356
  testRunner.And("the validators resolution scenarios should read", @"The following are recommended resolution scenarios:
  @Sprint4 @Unassigned @Must
  Scenario: Page at '{rootUrl}/Sample/SiteValidator/MyReviewedDateOlderThanUpdatedDateNoReviewerPage' reviewed
    Given I am a team member
    When I navigate to the ""{rootUrl}/Sample/SiteValidator/MyReviewedDateOlderThanUpdatedDateNoReviewerPage"" page
    Then the page should be reviewed and the reviewed date should be after the updated date
", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Reviewed Date is Older Than Oldest Acceptible Review " +
            "Date With Valid Reviewer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        public virtual void ValidateDocumentationPageReviewedDateIsOlderThanOldestAcceptibleReviewDateWithValidReviewer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Reviewed Date is Older Than Oldest Acceptible Review " +
                    "Date With Valid Reviewer", ((string[])(null)));
#line 366
this.ScenarioSetup(scenarioInfo);
#line 367
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 368
  testRunner.And("I have a documentation page \"with a reviewed date older than oldest allowed and a" +
                    " valid reviewer\" at \"/Sample/SiteValidator/MyReviewedDateOlderThanAllowedValidRe" +
                    "viewerPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 369
  testRunner.And("the page has \"John Reviewer\" tagged as the reviewer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 370
  testRunner.And("the test settings have \"Sprint4\" set as the current sprint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 371
  testRunner.And("the test settings have \"9\" months set at the oldest review date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 372
  testRunner.And("the test settings have a \"Must\" priority for resolving \"DocAgedReview\" errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 373
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 374
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/MyReviewedDateOlderThanAllowedValidReviewerPage\'\r\n    DocAgedReview - The rev" +
                    "iewed date is older than allowed.\r\n", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 381
  testRunner.And("the validators resolution scenarios should read", @"The following are recommended resolution scenarios:
  @Sprint4 @JohnReviewer @Must
  Scenario: Page at '{rootUrl}/Sample/SiteValidator/MyReviewedDateOlderThanAllowedValidReviewerPage' reviewed
    Given I am a team member
    When I navigate to the ""{rootUrl}/Sample/SiteValidator/MyReviewedDateOlderThanAllowedValidReviewerPage"" page
    Then the page should be reviewed and the reviewed date should be less than 9 months old
", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Reviewed Date is Older Than Oldest Acceptible Review " +
            "Date With Missing Reviewer and Valid Test Settings Default")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        public virtual void ValidateDocumentationPageReviewedDateIsOlderThanOldestAcceptibleReviewDateWithMissingReviewerAndValidTestSettingsDefault()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Reviewed Date is Older Than Oldest Acceptible Review " +
                    "Date With Missing Reviewer and Valid Test Settings Default", ((string[])(null)));
#line 391
this.ScenarioSetup(scenarioInfo);
#line 392
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 393
  testRunner.And("I have a documentation page \"with a reviewed date older than oldest allowed and a" +
                    " reviewer from the app settings\" at \"/Sample/SiteValidator/MyReviewedDateOlderTh" +
                    "anAllowedSettingsReviewerPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 394
  testRunner.And("the test settings have \"Sally Reviewer\" set as the default reviewer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 395
  testRunner.And("the test settings have \"Sprint4\" set as the current sprint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 396
  testRunner.And("the test settings have \"9\" months set at the oldest review date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 397
  testRunner.And("the test settings have a \"Must\" priority for resolving \"DocAgedReview\" errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 398
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 399
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/MyReviewedDateOlderThanAllowedSettingsReviewerPage\'\r\n    DocAgedReview - The " +
                    "reviewed date is older than allowed.\r\n", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 406
  testRunner.And("the validators resolution scenarios should read", @"The following are recommended resolution scenarios:
  @Sprint4 @SallyReviewer @Must
  Scenario: Page at '{rootUrl}/Sample/SiteValidator/MyReviewedDateOlderThanAllowedSettingsReviewerPage' reviewed
    Given I am a team member
    When I navigate to the ""{rootUrl}/Sample/SiteValidator/MyReviewedDateOlderThanAllowedSettingsReviewerPage"" page
    Then the page should be reviewed and the reviewed date should be less than 9 months old
", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Documentation Page Reviewed Date is Older Than Oldest Acceptible Review " +
            "Date With Missing Reviewer and Missing Test Settings Default")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Validate Documentation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Current")]
        public virtual void ValidateDocumentationPageReviewedDateIsOlderThanOldestAcceptibleReviewDateWithMissingReviewerAndMissingTestSettingsDefault()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Documentation Page Reviewed Date is Older Than Oldest Acceptible Review " +
                    "Date With Missing Reviewer and Missing Test Settings Default", new string[] {
                        "Current"});
#line 417
this.ScenarioSetup(scenarioInfo);
#line 418
  testRunner.Given("I am a team member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 419
  testRunner.And("I have a documentation page \"with a reviewed date older than oldest allowed and a" +
                    " reviewer from the app settings\" at \"/Sample/SiteValidator/MyReviewedDateOlderTh" +
                    "anAllowedSettingsReviewerPage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 420
  testRunner.And("the test settings are missing a default reviewer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 421
  testRunner.And("the test settings have \"Sprint4\" set as the current sprint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 422
  testRunner.And("the test settings have \"9\" months set at the oldest review date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 423
  testRunner.And("the test settings have a \"Must\" priority for resolving \"DocAgedReview\" errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 424
  testRunner.When("I validate the page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 425
  testRunner.Then("the validators error messages should read", "The following pages had validation errors:\r\n  Page: \'{rootUrl}/Sample/SiteValidat" +
                    "or/MyReviewedDateOlderThanAllowedSettingsReviewerPage\'\r\n    DocAgedReview - The " +
                    "reviewed date is older than allowed.\r\n", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 432
  testRunner.And("the validators resolution scenarios should read", @"The following are recommended resolution scenarios:
  @Sprint4 @Unassigned @Must
  Scenario: Page at '{rootUrl}/Sample/SiteValidator/MyReviewedDateOlderThanAllowedSettingsReviewerPage' reviewed
    Given I am a team member
    When I navigate to the ""{rootUrl}/Sample/SiteValidator/MyReviewedDateOlderThanAllowedSettingsReviewerPage"" page
    Then the page should be reviewed and the reviewed date should be less than 9 months old
", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
