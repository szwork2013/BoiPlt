using Breeze.WebApi2;
using Protiviti.Boilerplate.Server.Logging;
using System.Linq;
using System.Web.Http;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using Microsoft.AspNet.Identity.EntityFramework;
using Breeze.ContextProvider.EF6;
using Microsoft.AspNet.Identity;
using Protiviti.Boilerplate.Server.Filters;

namespace Protiviti.Boilerplate.Server.Api.Account
{
    [SlabLoggingFilter]
    [BreezeController]
    [RoutePrefix("api/RoleManager")]
    [Authorize(Roles = IdentityConstants.Roles.Administrator)]
    public class RoleManagerController : ApiController
    {
        // Initialize entity framework breeze controller
        private EFContextProvider<ApplicationDbContext> _contextProvider = new EFContextProvider<ApplicationDbContext>();
        public RoleManagerController()
        {
        }

        /// <summary>
        /// Get the list of all employees
        /// </summary>
        /// <remarks>list of all employees</remarks>
        /// <response code="400">Bad request</response>
        /// <response code="500">Internal Server Error</response>
        // ~/breeze/RoleManager/Roles
        [HttpGet]
        [Route("Roles")]
        public IQueryable<IdentityRole> Roles()
        {
            //return _contextProvider.Context.Roles.Select(x => new RoleViewModel { Id = x.Id, Name = x.Name, IsEditable = (x.Users.Count > 0 ? true : false) });
            return _contextProvider.Context.Roles.Where(x => x.Name.ToLower() != IdentityConstants.Roles.Administrator);
        }


        // ~/breeze/RoleManager/Metadata
        [HttpGet]
        [Route("Metadata")]
        public string Metadata()
        {
            return _contextProvider.Metadata();
        }


        [HttpPost]
        [Route("DeleteRole")]
        public async Task<IdentityResult> DeleteRole(JObject deleteRole)
        {
            string roleName = ((dynamic)deleteRole).Name.Value;
            string roleId = ((dynamic)deleteRole).Id.Value;

            IdentityResult result = null;
            var roleStore = new RoleStore<IdentityRole>(_contextProvider.Context);
            var roleManager = new ApplicationRoleManager(roleStore);

            var role = await roleManager.FindByNameAsync(roleName);
            //var role = await roleManager.FindByIdAsync(roleId);
            if (role != null)
            {
                result = await roleManager.DeleteAsync(role);
            }

            return result;
        }

        [HttpPut]
        [Route("UpdateRole")]
        public async Task<IdentityResult> UpdateRole(JObject newRole)
        {
            string roleName = ((dynamic)newRole).Name.Value;
            string roleId = ((dynamic)newRole).Id.Value;

            IdentityResult result = null;
            var roleStore = new RoleStore<IdentityRole>(_contextProvider.Context);
            var roleManager = new ApplicationRoleManager(roleStore);

            var role = await roleManager.FindByIdAsync(roleId);
            if (role != null)
            {
                role.Name = roleName;
                result = await roleManager.UpdateAsync(role);
            }
            return result;
        }

        [HttpPost]
        [Route("SaveChanges")]
        public async Task<IdentityResult> SaveChanges(JObject newRole)
        {
            string roleName = ((dynamic)newRole).Name.Value;
            string roleId = ((dynamic)newRole).Id.Value;
            //dynamic oldRole = ((dynamic)newRole).oldRole.Value;

            IdentityResult result = null;
            var roleStore = new RoleStore<IdentityRole>(_contextProvider.Context);
            var roleManager = new ApplicationRoleManager(roleStore);

            var role = await roleManager.FindByIdAsync(roleId);
            if (role == null)
            {
                result = await roleManager.CreateAsync(new IdentityRole(roleName));
            }

            return result;
        }

        // ~/breeze/RoleManager/SaveChanges
        //[HttpPost]
        //public bool SaveChanges(JObject saveBundle)
        //{


        //    return true;


        //    //JsonSerializer = CreateJsonSerializer();
        //    //var dynSaveBundle = (dynamic)saveBundle;
        //    //var entitiesArray = (JArray)dynSaveBundle.entities;
        //    //var dynSaveOptions = dynSaveBundle.saveOptions;

        //    //SaveOptions = (SaveOptions)JsonSerializer.Deserialize(new JTokenReader(dynSaveOptions), typeof(SaveOptions));
        //    //SaveWorkState = new SaveWorkState(_contextProvider, entitiesArray);

        //    //var saveMap = SaveWorkState.SaveMap;

        //    //SaveWorkState.BeforeSave();

        //    ////var e = SaveWorkState.EntitiesWithAutoGeneratedKeys;
        //    ///*
        //    //*/

        //    //string roleName = string.Empty;
        //    //string roleId = string.Empty;
        //    //var role = saveBundle.SelectToken("entities")[0].Children();// saveBundle.SelectToken("entities") .AsJEnumerable();// .First.First.FirstOrDefault().SelectToken("Name");

        //    //foreach (JProperty prop in role)
        //    //{
        //    //    if (prop.Name == "Name")
        //    //        roleName = prop.Value.ToString();
        //    //    else if (prop.Name == "Id") roleId = prop.Value.ToString();
        //    //}
        //    //IdentityResult result = null;
        //    //var roleStore = new RoleStore<IdentityRole>(_contextProvider.Context);
        //    //var roleManager = new ApplicationRoleManager(roleStore);
        //    ////var role = roleManager.FindByName(roleName);

        //    //if (!string.IsNullOrWhiteSpace(roleName))
        //    //{
        //    //    if (!roleManager.RoleExists(roleName))
        //    //    {
        //    //        result = roleManager.Create(new IdentityRole(roleName));
        //    //    }
        //    //    {
        //    //        //var entityError = new EntityError()
        //    //        //{
        //    //        //    EntityTypeName = entityTypeName,
        //    //        //    KeyValues = keyValues,
        //    //        //    ErrorMessage = ve.ErrorMessage,
        //    //        //    PropertyName = ve.PropertyName
        //    //        //};
        //    //    }

        //    //}

        //    //SaveResult breezeResult = new SaveResult();

        //    ////SaveWorkState.AfterSave();
        //    ////return SaveWorkState.ToSaveResult();

        //    //if (result.Succeeded)
        //    //{
        //    //    breezeResult.Entities = _contextProvider.Context.Roles.Where(x => x.Name == roleName).ToList<object>();

        //    //    breezeResult.Errors = null;

        //    //}
        //    //return breezeResult;
        //    //return _contextProvider.SaveChanges(saveBundle);



        //}

        //private List<KeyMapping> UpdateAutoGeneratedKeys(List<EntityInfo> entitiesWithAutoGeneratedKeys)
        //{
        //    // where clause is necessary in case the Entities were suppressed in the beforeSave event.
        //    var keyMappings = entitiesWithAutoGeneratedKeys.Cast<EFEntityInfo>()
        //      .Where(entityInfo => entityInfo.ObjectStateEntry != null)
        //      .Select(entityInfo =>
        //    {
        //        var autoGeneratedKey = entityInfo.AutoGeneratedKey;
        //        if (autoGeneratedKey.AutoGeneratedKeyType == AutoGeneratedKeyType.Identity)
        //        {
        //            autoGeneratedKey.RealValue = GetOsePropertyValue(entityInfo.ObjectStateEntry, autoGeneratedKey.PropertyName);
        //        }
        //        return new KeyMapping()
        //        {
        //            EntityTypeName = entityInfo.Entity.GetType().FullName,
        //            TempValue = autoGeneratedKey.TempValue,
        //            RealValue = autoGeneratedKey.RealValue
        //        };
        //    });
        //    return keyMappings.ToList();
        //}


    }
}
