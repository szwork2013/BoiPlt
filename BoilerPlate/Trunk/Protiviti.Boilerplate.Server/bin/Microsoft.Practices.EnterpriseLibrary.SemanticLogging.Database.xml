<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Database</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks.SqlDatabaseSink">
            <summary>
            Sink that asynchronously writes entries to SQL Server database.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks.SqlDatabaseSink.#ctor(System.String,System.String,System.String,System.TimeSpan,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks.SqlDatabaseSink"/> class with the specified instance name, connection string and table name.
            </summary>
            <param name="instanceName">The name of the instance originating the entries.</param>
            <param name="connectionString">The connection string.</param>
            <param name="tableName">The name of the table.</param>
            <param name="bufferingInterval">The buffering interval between each batch publishing.</param>
            <param name="bufferingCount">The number of entries that will trigger a batch publishing.</param>
            <param name="maxBufferSize">The maximum number of entries that can be buffered while it's sending to the store before the sink starts dropping entries.</param>      
            <param name="onCompletedTimeout">Defines a timeout interval for when flushing the entries after an <see cref="M:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks.SqlDatabaseSink.OnCompleted"/> call is received and before disposing the sink.
            This means that if the timeout period elapses, some event entries will be dropped and not sent to the store. Normally, calling <see cref="M:System.IDisposable.Dispose"/> on 
            the <see cref="T:System.Diagnostics.Tracing.EventListener"/> will block until all the entries are flushed or the interval elapses.
            If <see langword="null"/> is specified, then the call will block indefinitely until the flush operation finishes.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks.SqlDatabaseSink.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks.SqlDatabaseSink"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks.SqlDatabaseSink.FlushAsync">
            <summary>
            Flushes the buffer content to <see cref="M:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks.SqlDatabaseSink.PublishEventsAsync(System.Collections.Generic.IList{Microsoft.Practices.EnterpriseLibrary.SemanticLogging.EventEntry})"/>.
            </summary>
            <returns>The Task that flushes the buffer.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks.SqlDatabaseSink.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks.SqlDatabaseSink"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks.SqlDatabaseSink.OnCompleted">
            <summary>
            Notifies the observer that the provider has finished sending push-based notifications.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks.SqlDatabaseSink.OnError(System.Exception)">
            <summary>
            Notifies the observer that the provider has experienced an error condition.
            </summary>
            <param name="error">An object that provides additional information about the error.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks.SqlDatabaseSink.OnNext(Microsoft.Practices.EnterpriseLibrary.SemanticLogging.EventEntry)">
            <summary>
            Provides the sink with new data to write.
            </summary>
            <param name="value">The current entry to write to the database.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks.SqlDatabaseSink.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">A value indicating whether or not the class is disposing.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.SqlDatabaseLog">
            <summary>
            Factories and helpers for using the <see cref="T:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks.SqlDatabaseSink"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.SqlDatabaseLog.DefaultTableName">
            <summary>
            Default table name used to write traces.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.SqlDatabaseLog.LogToSqlDatabase(System.IObservable{Microsoft.Practices.EnterpriseLibrary.SemanticLogging.EventEntry},System.String,System.String,System.String,System.Nullable{System.TimeSpan},System.Int32,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Subscribes to an <see cref="T:System.IObservable`1"/> using a <see cref="T:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks.SqlDatabaseSink"/>.
            </summary>
            <param name="eventStream">The event stream. Typically this is an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.ObservableEventListener"/>.</param>
            <param name="instanceName">The name of the instance originating the entries.</param>
            <param name="connectionString">The connection string.</param>
            <param name="tableName">The name of the table.</param>
            <param name="bufferingInterval">The buffering interval between each batch publishing. Default value is <see cref="F:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Utility.Buffering.DefaultBufferingInterval"/>.</param>
            <param name="bufferingCount">The number of entries that will trigger a batch publishing.</param>
            <param name="onCompletedTimeout">Defines a timeout interval for when flushing the entries after an <see cref="M:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks.SqlDatabaseSink.OnCompleted"/> call is received and before disposing the sink.
            This means that if the timeout period elapses, some event entries will be dropped and not sent to the store. Normally, calling <see cref="M:System.IDisposable.Dispose"/> on 
            the <see cref="T:System.Diagnostics.Tracing.EventListener"/> will block until all the entries are flushed or the interval elapses.
            If <see langword="null"/> is specified, then the call will block indefinitely until the flush operation finishes.</param>
            <param name="maxBufferSize">The maximum number of entries that can be buffered while it's sending to Windows Azure Storage before the sink starts dropping entries.
            This means that if the timeout period elapses, some event entries will be dropped and not sent to the store. Normally, calling <see cref="M:System.IDisposable.Dispose"/> on
            the <see cref="T:System.Diagnostics.Tracing.EventListener"/> will block until all the entries are flushed or the interval elapses.
            If <see langword="null"/> is specified, then the call will block indefinitely until the flush operation finishes.</param>
            <returns>A subscription to the sink that can be disposed to unsubscribe the sink and dispose it, or to get access to the sink instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.SqlDatabaseLog.CreateListener(System.String,System.String,System.String,System.Nullable{System.TimeSpan},System.Int32,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Subscribes to the listener using a <see cref="T:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks.SqlDatabaseSink"/>.
            </summary>
            <param name="instanceName">The name of the instance originating the entries.</param>
            <param name="connectionString">The connection string.</param>
            <param name="tableName">The name of the table.</param>
            <param name="bufferingInterval">The buffering interval between each batch publishing.</param>
            <param name="bufferingCount">The number of entries that will trigger a batch publishing.</param>
            <param name="listenerDisposeTimeout">Defines a timeout interval for the flush operation when the listener is disposed.
            This means that if the timeout period elapses, some event entries will be dropped and not sent to the store. Calling <see cref="M:System.IDisposable.Dispose"/> on 
            the <see cref="T:System.Diagnostics.Tracing.EventListener"/> will block until all the entries are flushed or the interval elapses.
            If <see langword="null"/> is specified, then the call will block indefinitely until the flush operation finishes.</param>
            <param name="maxBufferSize">The maximum number of entries that can be buffered while it's sending to Windows Azure Storage before the sink starts dropping entries.
            This means that if the timeout period elapses, some event entries will be dropped and not sent to the store. Normally, calling <see cref="M:System.IDisposable.Dispose"/> on
            the <see cref="T:System.Diagnostics.Tracing.EventListener"/> will block until all the entries are flushed or the interval elapses.
            If <see langword="null"/> is specified, then the call will block indefinitely until the flush operation finishes.</param>
            <returns>An event listener that uses <see cref="T:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks.SqlDatabaseSink"/> to log events.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Database.Utility.EventEntryExtensions">
            <summary>
            Extensions for <see cref="T:Microsoft.Practices.EnterpriseLibrary.SemanticLogging.EventEntry"/>.
            </summary>
        </member>
    </members>
</doc>
